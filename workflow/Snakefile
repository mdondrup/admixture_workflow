import os
# Snakefile for runnign several admixture analyses.

config: "../config/config.yaml"

from snakemake.utils import min_version
min_version("8.14") # using the exists() function

imclude: "rules/setup.smk"


onsuccess:
    print("Workflow finished, no error")
    shell("send_message.py 'Admixture pipeline finished, no error'") # comment out this line if you don't have a messenger script
onerror:
    print("An error occurred, see the log")
    shell("send_message.py 'An error occured in TreeMix pipeline, see the log: {log}'")
    
onstart::    
    print ("----------------------------------------------------------------------------")
    print ("Starting Admixture analysis pipeline")
    print ("Merging the following input data files:\n Panel: "+PANEL+ "\n VCF: "+VCF)
    print ("Sometimes a small number of TreeMix bootstrap replicates may not terminate.")
    print ("The workflow will re-try these jobs up to 5 times")
    print ("----------------------------------------------------------------------------")
    shell('send_message.py "TreeMix pipeline started at $(date)"') # comment out this line if you don't have a messenger script

# The messenger script is not included in the repository 

PANEL="input/S1_Data.vcf.gz"
VCF="input/selected-SNPINDEL_Ploidy2.vcf.gz"

TreeMixBoot=range(1,501) # Number of bootstrap replicates (500)
TreeMixMigr=range(0,11) # Max number of Migration events to test
Chromosomes=map(lambda x: "chr"+str(x) , range(1,16+1)) # Chromosomes to use
SiteFilters=["LDpruned", "SweeD", "Sake-Kveik-Fst"]


Leave1Out=list(map(lambda x: "L1O_"+x, Chromosomes))
# comment out the following line to disable Leave-1-chromosome-out analysis
#SiteFilters=SiteFilters + Leave1Out

## Set range of K for ADMIXTURE
admixture_k=range(2,17)
AdmixtoolsN=TreeMixMigr



rule all:
    input:
        setup="misc/.setup_complete",
        idx1=expand("{v}.csi", v=VCF),
        idx2=expand("{p}.csi", p=PANEL),
        cons=expand("results/TreeMix/Consensus_{filter}_m{migrations}.treeout.gz",  filter=SiteFilters, migrations=TreeMixMigr),
        treeplots=expand("results/TreeMix/plots/Consensus_{filter}_plots.pdf", filter=SiteFilters),
        admixtureplots=expand("results/admixture/plots/final-panel.{filter}.tiff", filter=SiteFilters),
        admixtools_import=expand("results/admixture/final-panel.{filter}.f2data", filter=SiteFilters),
        admixtools_plots=expand("results/admixture/admixtools/plots/final-panel.{filter}.pdf", filter=SiteFilters),
#        admixbayes=expand('results/admixbayes/plots/admixturebayes-{filter}_topology_1.pdf', filter=SiteFilters)

rule clean:
    message: "Cleaning analysis results. Installed tools will not be removed."
    shell:
        r"""
        rm -rf results/
        rm -f misc/yeast.clust        
        """
             

### rule for generating a single bootstrap replicates
### bootstrap replicates will be run in parallel

rule:
    name: "TreeMix_bootstrap" 
    conda: "envs/treemix.yaml"
    input: "results/final-panel.{myfilter}.treemix.frq.gz"
    output:
        treeout="results/TreeMix/bootstrap/{myfilter}/bootrep_m{migrations}_b{replicate}.treeout.gz",
            cov="results/TreeMix/bootstrap/{myfilter}/bootrep_m{migrations}_b{replicate}.cov.gz",
            modelcov="results/TreeMix/bootstrap/{myfilter}/bootrep_m{migrations}_b{replicate}.modelcov.gz",
            llik="results/TreeMix/bootstrap/{myfilter}/bootrep_m{migrations}_b{replicate}.llik"
           
    threads: 1
    retries: 5
    resources:
        nr = lambda wildcards, attempt: attempt,
        runtime = "12h"
        
    log: "logs/bootrep_{myfilter}_m{migrations}_b{replicate}.log"
    params:
        prefix="results/TreeMix/bootstrap/{myfilter}/bootrep_m{migrations}_b{replicate}"
        
    message:
        "TreeMix boostrap replicate no. {wildcards.replicate} - filter: {wildcards.myfilter} migrations: {wildcards.migrations}, Log file: {log}"    
    shell:
        r"""
        mkdir -p results/TreeMix/bootstrap/{wildcards.myfilter} 
        SEED=$RANDOM
        #echo "SEED=$SEED" > {log}
        echo calculating bootstrap replicate  {wildcards.replicate} for {wildcards.myfilter} with {wildcards.migrations} migrations, seed: $SEED > {log}
        timeout --kill-after=30s {resources.runtime}m treemix -i {input} -bootstrap -k 500 -se -m {wildcards.migrations} -root Outgroup -seed $SEED -o {params.prefix} >> {log} 2>&1
        echo finished bootstrap replicate  {wildcards.replicate}, {wildcards.myfilter}, {wildcards.migrations} migrations, attempts: {resources.nr} >> {log}
        
        """

        # put all trees into a single file

rule: "merge_replicates"
    input:
        expand("results/TreeMix/bootstrap/{{nfilter}}/bootrep_m{{migrations}}_b{replicate}.treeout.gz",
               replicate=TreeMixBoot)
    output:
        "results/TreeMix/alltrees_{nfilter}_m{migrations}.trees"
    message: "Merging replicates for {wildcards.nfilter}, migrations {wildcards.migrations}"
    shell:
         """
         for f in {input}
         do
           zcat $f | head -1 >> {output}
         done
         """

rule:
    name: "OptM"
    conda: "envs/r-optm.yaml"
    input: expand("results/TreeMix/bootstrap/{{nfilter}}/bootrep_m{migrations}_b{replicate}.llik", migrations=TreeMixMigr, replicate=TreeMixBoot)
    output: plot="results/TreeMix/plots/{nfilter}-OptM-plot.pdf",
            txt="results/TreeMix/{nfilter}-OptM.txt"
    params: folder="results/TreeMix/bootstrap/{nfilter}"        
    shell:
        r"""
        mkdir -p results/TreeMix/plots
cat <<'EOF' > {rule}.$$.tmp.R

library(OptM)
test.optM <- optM('{params.folder}')
write.table(test.optM, file='{output.txt}', sep="\t", quote=F)
### plot needs to be set to FALSE if not in interactive mode        
plot_optM(test.optM, method = "Evanno", plot=FALSE, pdf='{output.plot}')

EOF
        
        Rscript {rule}.$$.tmp.R
        rm {rule}.$$.tmp.R
        
        """

rule plot_trees:
    conda: "envs/treemix.yaml"
    input:
        cons=expand("results/TreeMix/Consensus_{{filter}}_m{migrations}.treeout.gz", migrations=TreeMixMigr),
        list="misc/yeast.list"
    output:
        pdf="results/TreeMix/plots/Consensus_{filter}_plots.pdf"
    params:
        ms=TreeMixMigr,
        prefix="results/TreeMix/Consensus_{filter}_m"

    shell:
        r"""
mkdir -p results/TreeMix/plots
cat <<'EOF' > {rule}.$$.tmp.R

library(RColorBrewer)
source("scripts/plotting_funcs.R")        
mrange <- seq({params.ms}[1], {params.ms}[2]-1)         
prefix <- '{params.prefix}'

pdf(file='{output.pdf}')
        
for (m in mrange) {{
 x0=plot_tree(cex=1,  paste0(prefix,m))
 title(paste('{wildcards.filter}', m,"edges"))
 x1=plot_resid(stem=paste0(prefix,m), pop_order="{input.list}")
}}      
dev.off()
        
        
EOF

  Rscript {rule}.$$.tmp.R
  rm {rule}.$$.tmp.R
        
        
        """
        
        

        

         
rule consensus:
    conda: "envs/phylip.yaml"
    input: "results/TreeMix/alltrees_{nfilter}_m{migrations}.trees"
    output: "results/TreeMix/{nfilter}_m{migrations}.contree"
    params:
        wdir="results/TreeMix/{nfilter}_m{migrations}_wdir"
    shell:
        """
        WD=$(pwd)
        mkdir -p {params.wdir}
        IN=$(realpath {input})
        OUT=$(realpath {output})
        posOutgroup=`head -1 {input} | tr "," "\n" | grep "Outgroup" -n | cut -d":" -f1`
        cd {params.wdir}
        rm -f outtree
	# echo $posOutgroup
	echo $IN > pconf
	echo "O" >> pconf
	echo $posOutgroup >> pconf
	echo "Y" >> pconf
        consense < pconf
        cat outtree | tr -d "\n" > $OUT
        echo >> $OUT
        cd $WD
        rm -r {params.wdir}/
        """
  
rule final_tree_from_consensus:
    conda: "envs/treemix.yaml"
    input:
        contree="results/TreeMix/{filter}_m{migrations}.contree",
        frq="results/final-panel.{filter}.treemix.frq.gz"
    output: treeout="results/TreeMix/Consensus_{filter}_m{migrations}.treeout.gz",
            cov="results/TreeMix/Consensus_{filter}_m{migrations}.cov.gz",
            modelcov="results/TreeMix/Consensus_{filter}_m{migrations}.modelcov.gz"
    params:
        prefix="results/TreeMix/Consensus_{filter}_m{migrations}",
        k=500
    log: "logs/Consensus_{filter}_m{migrations}.log"
    message: "Computing final consensus tree for {wildcards.filter}, migrations: {wildcards.migrations} Log: {log}"     
    shell:
        """
        treemix -i {input.frq} -m {wildcards.migrations} -k {params.k} -root Outgroup \
        -se -tf {input.contree} -o {params.prefix} > {log}
        
        """
        

           
        

### prepare the panel file using VCF from Fay et al as input.


# rename the chromosomes in the kveik input  
rule rename_chromosomes:
    conda: "envs/vcftools.yaml"
    input: vcf=VCF,
           namemap="config/refseq2chr"
    output: vcf="results/renamed.vcf.gz",
            idx="results/renamed.vcf.gz.csi"
    threads: 60
    shell:
        """
        bcftools annotate --threads {threads} --rename-chrs {input.namemap} {input.vcf} | bgzip > {output.vcf}
        bcftools index -f {output.vcf}
 echo "---------------------------------------------------------"
        echo "Remaining markers after {rule}:"
        bcftools stats {output.vcf} | grep -e"^SN"
        
        """
                
### merge the panel with the provided vcf file
        
rule merge:        
    conda: "envs/vcftools.yaml"       
    input: vcf="results/renamed.vcf.gz",
           panel=PANEL
    output: "results/merged.vcf.gz"
               
    threads: 60       
    shell:
        """
	bcftools index -f {input.panel}
        bcftools merge --threads {threads} -0 -o {output} {input.vcf} {input.panel}
        echo "---------------------------------------------------------"
        echo "Remaining after {rule}:"
        bcftools stats {output} | grep -e"^SN"
        
        """
### exclude samples without annotation, also kveik sample 23 which isn't kveik 
### recode and remove missing values and keep bi-allelic SNPs

rule exclude_recode:
    conda: "envs/vcftools.yaml"
    input: vcf="results/merged.vcf.gz",
           excl="config/exclude.list"
    output: "results/final-panel.vcf.gz"
    threads: 60
    params:
    shell:            
        """
        bcftools view --threads {threads} --with-header --types snps --max-alleles 2 -S "^{input.excl}" {input.vcf} |\
        vcftools --gzvcf - --max-missing 1 --recode --stdout | bgzip -c > {output}

        echo "---------------------------------------------------------"
        echo "Remaining after {rule}:"
        bcftools stats {output} | grep -e"^SN"
        
        """

rule use_existing_clusterfile:
    conda: "envs/vcftools.yaml"
    input:
        vcf="results/final-panel.vcf.gz",         
        predefined="config/predefined-cluster-file.clust"
    output: "misc/yeast.clust" if exists ("config/predefined-cluster-file.clust") else []
    message: "Using pre-defined cluster file {input.predefined}"        
    priority: 50         
    shell:
        r"""
           cp -v {input.predefined}  {output}
        """
        

#rule test:
#    input:
#        # only expect the output if test.txt is present before workflow execution
#        "out.txt" if exists("misc/pbio.samples.txt") else [],


        

rule make_new_clusterfile:
    conda: "envs/vcftools.yaml"
    input:
        vcf="results/final-panel.vcf.gz",
        annot="config/pbio.samples.txt",

    output: "misc/yeast.clust" if not exists ("config/predefined-cluster-file.clust") else []
    message: "Generating new cluster file, all sampleswith name starting with 'sample' are put in one cluster."
    priority: 0         
    shell:
        """
        bcftools query -l {input.vcf} | scripts/makeClusterFile.pl {input.annot} > {output}
        """

### 
## calculate Weir-Cockerham Fst values with VCF-Tools        
###

rule weir_windowed_fst_calc:
    conda: "envs/vcftools.yaml"
    input:
        panel="results/final-panel.LDpruned.vcf.gz",
        clust="misc/yeast.clust"
    output: "results/sake_vs_kveik_fst.windowed.weir.fst"
            
    params: winsize=10000,
            winstep=10000,
            prefix="sake_vs_kveik_fst"
    shell:
        """
        grep -e "Asia/sake" {input.clust} | cut -f1 > misc/sake.grp
        grep -e "Kveik" {input.clust} | cut -f1 > misc/kveik.grp
        vcftools --gzvcf {input.panel} --weir-fst-pop misc/sake.grp --weir-fst-pop misc/kveik.grp --fst-window-size {params.winsize} --fst-window-step {params.winstep} --out {params.prefix}
        """

rule fst2bed:
    conda: "envs/fst2bed.yaml"
    input:
        wfst="results/sake_vs_kveik_fst.windowed.weir.fst"
    output:
        bed="results/sake_vs_kveik_fst.windowed.weir.bed",
        plot="results/sake_vs_kveik_fst.windowed.weir.plots.pdf"
    params: threshold=0.8
    script: 'scripts/fst2bed.R'


rule weir_windowed_fst_filter:
    conda: "envs/bedtools.yaml"
    input:
        panel="results/final-panel.LDpruned.vcf.gz",
        bed="results/sake_vs_kveik_fst.windowed.weir.bed"

    output: "results/final-panel.Sake-Kveik-Fst.vcf.gz"

    shell:
        """
        bedtools intersect -v -a {input.panel} -b {input.bed} -wa -header | bgzip > {output}
        
        echo "---------------------------------------------------------"
        echo "Remaining after {rule}:"
        bcftools stats {output} | grep -e"^SN"

        """
                

### subset the Ldpruned input to leave one chromosome out
        
rule leave1Out_filter:        
    conda: "envs/vcftools.yaml"
    input:
        panel="results/final-panel.LDpruned.vcf.gz",        

    output: "results/final-panel.L1O_{chrom}.vcf.gz"
    shell:
        """
        vcftools --gzvcf {input.panel} --not-chr {wildcards.chrom} --recode --stdout | bgzip -c > {output}        
        """

        
                
        

rule SweeD_filter:
    conda: "envs/bedtools.yaml"
    input: panel="results/final-panel.LDpruned.vcf.gz",
           full="results/merged.vcf.gz",
           cluster="misc/yeast.clust"
    output: "results/final-panel.SweeD.vcf.gz"
    params:
        grid=10000,
        percentile=95,
        groups="Kveik Beer/baking Asia/sake Lager"
    shell:
        """
set -x
        grps=({params.groups})
        rm -f filter.tmp.vcf filter.tmp0.vcf groups.grp.tmp
        for f in ${{grps[@]}}
        do
          grep -e "$f" {input.cluster} | cut -f1 >> groups.grp.tmp
        done
        
        bcftools view -S "groups.grp.tmp" --with-header -o filter.tmp0.vcf {input.full}
        bcftools +fixploidy -o filter.tmp.vcf  filter.tmp0.vcf -- -d2 
        
         tools/sweed/bin/SweeD -name sweedout -input filter.tmp.vcf -grid {params.grid}
        cat SweeD_Report.sweedout | scripts/sweed2bed.pl -p{params.percentile} > SweeD.filter.bed
        bedtools intersect -v -a {input.panel} -b SweeD.filter.bed -wa -header | bgzip > {output}
        rm filter.tmp.vcf
        echo "---------------------------------------------------------"
        echo "Remaining after {rule}:"
        bcftools stats {output} | grep -e"^SN"
        
        """


           
        
        
rule ld_prune:
     conda: "envs/vcftools.yaml"
     input: "results/final-panel.vcf.gz"
     output: "results/final-panel.LDpruned.vcf.gz"
     params:
         threshold=0.2
     message: "Pruning SNP matrix for markers in LD > {params.threshold} ..."    

         
     shell:
         """
        scripts/ldPruning.sh {input} vcf {params.threshold}

        echo "---------------------------------------------------------"
        echo "Remaining Markers after {rule}, LD_threshold {params.threshold}:"
        bcftools stats {output} | grep -e"^SN"


         
         """

         
rule treemix_input:
    conda: "envs/vcftools.yaml"
    input: vcf="results/final-panel.{filter}.vcf.gz",       
   	   clust="misc/yeast.clust"
    output: "results/final-panel.{filter}.treemix.frq.gz"
    
    shell:
          """
    scripts/vcf2treemix.sh {input.vcf} {input.clust}
    
          """
### separate treemix and admixture/admixtools plink output    
         
rule make_bed:
    conda:"envs/admixture.yaml"
    input: vcf="results/final-panel.{filter}.vcf.gz", clust="misc/yeast.clust"   
    output: bed="results/final-panel.{filter}.admixture.bed", fam="final-panel.{filter}.admixture.fam"
    params: prefix="results/final-panel.{filter}.admixture"          
    priority: 100000
    message: "Generating ADMIXTURE input files"
    shell:
        r"""
        
        plink --vcf {input.vcf} --make-bed --out {params.prefix} --const-fid --allow-extra-chr --allow-no-sex        
        plink --bfile {params.prefix} --freq --missing --within {input.clust} --out {params.prefix} --allow-no-sex --allow-extra-chr
        ### make a fam file with the correct populations
        sort -k1 {input.clust} > {input.clust}.sorted
        sort -k2 {output.fam} > {output.fam}.sorted
        join -1 1 -2 2 {input.clust}.sorted {output.fam}.sorted | tr "/" "_" | awk '{{printf $3" "$2" "$4" "$5" "$6" "$7" "$8"\n" }}' > {output.fam}.tmp
        mv {output.fam}.tmp {output.fam}
        rm -f {input.clust}.sorted {output.fam}.sorted
        
        """
         
     
    
rule ADMIXTURE_run:
    conda:"envs/admixture.yaml"
    input: "results/final-panel.{filter}.admixture.bed"   
    output:
        q="results/admixture/final-panel.{filter}.admixture.{K}.Q",
        p="results/admixture/final-panel.{filter}.admixture.{K}.P"
    params: prefix="final-panel.{filter}.admixture.{K}"
    log: "logs/admixture-final-panel.{filter}.{K}.log"
    message: "Running ADMIXTURE for filter {wildcards.filter}, K={wildcards.K}"     
    shell:
        """
        mkdir -p results/admixture
        cd results/admixture
        admixture  --cv ../{input} {wildcards.K} > ../../{log}
        
        """

rule ADMIXTURE_plot:
    conda:"envs/admixtureplot.yaml"
    input:   
        q=expand("results/admixture/final-panel.{{filter}}.admixture.{K}.Q", K=admixture_k),
        p=expand("results/admixture/final-panel.{{filter}}.admixture.{K}.P", K=admixture_k)
    output:
        "results/admixture/plots/final-panel.{filter}.tiff"
        
    params: prefix="results/admixture/final-panel.{filter}.admixture",
            poporder="Africa,China,Clinical,Europe/wine,Japan_1,Japan_2,Asia/sake,KveikHC1,KveikHC2,KveikHC3,KveikHC4,KveikHC10,KveikIC12,KveikIC15,KveikIC16,KveikIC6,KveikIC7,KveikIC8,Ale_1,Ale_2,Beer/baking,Lager,Lab,Med/oak,Outgroup"
    shell:
        r"""
        #echo {params.poporder}
        mkdir -p admixture/plots
        awk '{{printf $2"\t"$3"\n"}}' misc/yeast.clust > misc/yeast.admix.list
        Rscript scripts/plotADMIXTURE.r -p {params.prefix} -i misc/yeast.admix.list -k 15 -l "{params.poporder}"
        mv {params.prefix}.tiff {output}
        """
        
rule admixtools_import:
    conda:"envs/admixtools.yaml"    
    input: bed="results/final-panel.{filter}.admixture.bed", fam="results/final-panel.{filter}.admixture.fam"
    output: directory("results/admixtools/final-panel.{filter}.f2data")       
    params: prefix="final-panel.{filter}.admixture"
    resources: mem_mb=100000        
    shell:
        r"""

mkdir -p {output}
        
cat <<'EOF' > {rule}.$$.tmp.R

library(admixtools)

prefix <- "{params.prefix}"
my_f2_dir = '{output}'

extract_f2(prefix, my_f2_dir, overwrite = TRUE, maxmem = {resources.mem_mb})
EOF
        
Rscript {rule}.$$.tmp.R
rm {rule}.$$.tmp.R        
        

    """    

rule admixtools_run:
    conda: "envs/admixtools.yaml"    
    input: "results/admixtools/final-panel.{filter}.f2data"
    output: "results/admixtools/final-panel.{filter}.{N}.rda"
    log:    "logs/admixtools-final-panel.{filter}.{N}.log"     
    params: maxgen=500
    shell:        
        r"""

    
cat <<'EOF' > {rule}.$$.tmp.R


library(admixtools)
library(magrittr)
library(plotly)
library(tidyverse)
f2_blocks = f2_from_precomp("{input}")
n <- {wildcards.N}
opt_results = find_graphs(f2_blocks, numadmix = n, outpop = 'Outgroup',
  	                        stop_gen = {params.maxgen})
      
winner = opt_results %>% slice_min(score, with_ties = FALSE)
sc <- round(winner$score[[1]], digits = 1)
opt_plot=plot_graph(winner$edges[[1]], title = paste(n, " edges, score:", sc ))
opt_plotly=plotly_graph(winner$edges[[1]], annot = paste("e:", n, "s:", sc ))
save(opt_results, opt_plot, opt_plotly, n, file = "{output}") # save the checkpoint

EOF
    
Rscript {rule}.$$.tmp.R > {log} 2>&1
rm {rule}.$$.tmp.R       

    
        """
        
### plot all the admixture graphs for one filter
        

rule admixtools_plot:
    conda: "envs/admixtools.yaml"    
    input: expand("results/admixtools/final-panel.{{filter}}.{N}.rda", N=AdmixtoolsN)       
    output: "results/admixtools/plots/final-panel.{filter}.pdf"
    shell:        
        r"""

    
cat <<'EOF' > {rule}.$$.tmp.R      

#library(admixtools)
#library(magrittr)
library(plotly)
#library(tidyverse)

inputfiles <- unlist(strsplit("{input}", " "))
x <-  list()
for (f in inputfiles) {{
    load(f)
    x[[n+1]] <- opt_plot

}}

pdf(file="{output}", onefile=TRUE)    
    
for (i in seq(length(x))) {{
	print(x[[i]])
}}    

dev.off()    

EOF

Rscript {rule}.$$.tmp.R
rm {rule}.$$.tmp.R     
        
        """
    

rule admixbayes_mcmc:
    conda: "envs/admixturebayes.yaml"
    input: frq="results/final-panel.{filter}.treemix.frq.gz",
           script="tools/AdmixtureBayes"
    output:
        mcmc="results/admixbayes/admixturebayes-{filter}.mcmc.csv"                
    params:
        prefix="admixbayes/admixturebayes-{filter}",
        iter=1500000, # should be > 500000 for production
        chains=20
    threads: 120
    log: "logs/admixturebayes-{filter}.mcmc.log"    
    shell:
        r"""
        ## throws an error if the tempfolder exists
        rm -rf results/admixbayes/admixturebayes-{wildcards.filter}mcmccsv_tempfilefolder
        TMP=$(mktemp {rule}.{wildcards.filter}.XXXXXXXX.frq)
        ### fix the population names, admixbayes doesn't tolerate non-word characters
        gunzip -cd {input.frq} |  perl -e '$_ = <>; s/[^\w\s]|_//g ; print ; print while (<>)' > $TMP 
        
        ### (i) MCMC: This takes longest, and produces a lot of output
        
        python tools/AdmixtureBayes/admixturebayes/runMCMC.py --input_file $TMP \
        --n {params.iter} --result_file {output.mcmc} --MCMC_chains {params.chains} \
        --outgroup Outgroup > {log} 2>&1                
        
        rm -f $TMP
        """

rule admixbayes_analyze:
    conda: "envs/admixturebayes.yaml"
    input: "results/admixbayes/admixturebayes-{filter}.mcmc.csv"
    output: "results/admixbayes/admixturebayes-{filter}.thinned.csv"                
    params:
        prefix="results/admixbayes/admixturebayes-{filter}",
        burnin=0.5,
        thinning=10
    shell:
         """

         python tools/AdmixtureBayes/admixturebayes/analyzeSamples.py  --mcmc_results {input} \
         --result_file {output} --burn_in_fraction {params.burnin} --thinning_rate {params.thinning}


         """

         
rule admixbayes_plot:
    conda: "envs/admixturebayes.yaml"
  
    input: "results/admixbayes/admixturebayes-{filter}.thinned.csv"
    output: topology='results/admixbayes/plots/admixturebayes-{filter}_topology_1.pdf',
            labels='results/admixbayes/plots/admixturebayes-{filter}_topology_labels_1.pdf',
             minimal='results/admixbayes/plots/admixturebayes-{filter}_minimal_topology_1.pdf'
                     
    params:
        prefix="results/admixbayes/plots/admixturebayes-{filter}"

    shell:
         """
         ## just plot everything
         
         python tools/AdmixtureBayes/admixturebayes/makePlots.py --plot top_trees \
         --posterior {input} --output_prefix {params.prefix}_topology

         python tools/AdmixtureBayes/admixturebayes/makePlots.py --plot estimates \
         --posterior {input} --output_prefix {params.prefix}_topology_labels
         
         python tools/AdmixtureBayes/admixturebayes/makePlots.py --plot top_minimal_topologies \
         --posterior {input} --output_prefix {params.prefix}_minimal_topology

         
         python tools/AdmixtureBayes/admixturebayes/makePlots.py --plot consensus_trees \
         --posterior {input} --output_prefix {params.prefix}_consensus
         

         """        
        
